# Build stage
FROM node:18-slim AS builder

WORKDIR /app

# 添加构建参数
ARG SETTLEMENT_CONTRACT_ADDRESS
ARG RPC_PROVIDER
ARG CHAIN_ID

# 在构建阶段打印参数（构建日志中可见）
RUN echo "Build arguments in builder stage:" && \
    echo "SETTLEMENT_CONTRACT_ADDRESS=${SETTLEMENT_CONTRACT_ADDRESS}" && \
    echo "RPC_PROVIDER=${RPC_PROVIDER}" && \
    echo "CHAIN_ID=${CHAIN_ID}"

# 安装构建依赖
RUN apt-get update && apt-get install -y \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# 复制 package.json 和 package-lock.json
COPY package*.json ./

# 修改 package.json 移除 postinstall 脚本
RUN if grep -q "postinstall" package.json; then \
      sed -i 's/"postinstall": "npm run build",//g' package.json; \
    fi

# 安装依赖
RUN npm ci --quiet

# 复制源代码
COPY . .

# 创建 tsconfig.json 如果不存在
RUN if [ ! -f tsconfig.json ]; then \
      echo '{ \
        "compilerOptions": { \
          "target": "es2020", \
          "module": "commonjs", \
          "esModuleInterop": true, \
          "outDir": "./dist", \
          "strict": true, \
          "skipLibCheck": true, \
          "forceConsistentCasingInFileNames": true \
        }, \
        "include": ["src/**/*"] \
      }' > tsconfig.json; \
    fi

# 构建应用
RUN npm run build || npx tsc

# Production stage
FROM node:18-slim

# 重新声明 ARG，这在多阶段构建中是必需的
ARG SETTLEMENT_CONTRACT_ADDRESS
ARG RPC_PROVIDER
ARG CHAIN_ID

WORKDIR /app

# 从构建阶段复制必要文件
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules

# 创建 .env 文件（在生产阶段而不是构建阶段）
RUN echo "SETTLEMENT_CONTRACT_ADDRESS=${SETTLEMENT_CONTRACT_ADDRESS}" > .env && \
    echo "RPC_PROVIDER=${RPC_PROVIDER}" >> .env && \
    echo "CHAIN_ID=${CHAIN_ID}" >> .env

# 设置环境变量
ENV SETTLEMENT_CONTRACT_ADDRESS="${SETTLEMENT_CONTRACT_ADDRESS}" \
    RPC_PROVIDER="${RPC_PROVIDER}" \
    CHAIN_ID="${CHAIN_ID}" \
    MONGO_URI="mongodb://localhost:27017"

# 添加调试信息
RUN echo "Verifying environment variables:" && \
    echo "SETTLEMENT_CONTRACT_ADDRESS=${SETTLEMENT_CONTRACT_ADDRESS}" && \
    echo "RPC_PROVIDER=${RPC_PROVIDER}" && \
    echo "CHAIN_ID=${CHAIN_ID}" && \
    echo "MONGO_URI=${MONGO_URI}"

# 创建启动脚本，用于在容器启动时检查服务
RUN echo '#!/bin/sh\n\
# 如果 IMAGE 为空，尝试使用 DNS 查找服务\n\
if [ -z "$IMAGE" ]; then\n\
  echo "IMAGE not set, attempting to discover from main service..."\n\
  # 尝试几个可能的主服务名\n\
  for service in main-service holdit-service zkwasm-service; do\n\
    if nslookup $service 2>/dev/null; then\n\
      # 尝试从服务的 .env 文件获取 IMAGE\n\
      if curl -s http://$service:3000/api/config 2>/dev/null | grep -q "IMAGE"; then\n\
        export IMAGE=$(curl -s http://$service:3000/api/config | grep IMAGE | cut -d":" -f2 | tr -d " ,")\n\
        echo "Discovered IMAGE from $service: $IMAGE"\n\
        break\n\
      fi\n\
    fi\n\
  done\n\
  \n\
  # 如果仍然为空，使用默认值或警告\n\
  if [ -z "$IMAGE" ]; then\n\
    echo "WARNING: Could not discover IMAGE from main service. Some features may not work correctly."\n\
  fi\n\
fi\n\
\n\
# 如果 ZKWASM_RPC_URL 为空，尝试使用 DNS 查找服务\n\
if [ -z "$ZKWASM_RPC_URL" ]; then\n\
  echo "ZKWASM_RPC_URL not set, attempting to discover service..."\n\
  # 尝试几个可能的服务名\n\
  for service in holdit-devops holdit rpc-service; do\n\
    if nslookup $service 2>/dev/null; then\n\
      export ZKWASM_RPC_URL="http://$service:3000"\n\
      echo "Discovered service: $ZKWASM_RPC_URL"\n\
      break\n\
    fi\n\
  done\n\
  \n\
  # 如果仍然为空，使用默认值\n\
  if [ -z "$ZKWASM_RPC_URL" ]; then\n\
    export ZKWASM_RPC_URL="http://holdit-devops:3000"\n\
    echo "No service discovered, using default: $ZKWASM_RPC_URL"\n\
  fi\n\
fi\n\
\n\
# 如果 MONGO_URI 为空或包含 localhost，尝试使用 DNS 查找服务\n\
if [ -z "$MONGO_URI" ] || echo "$MONGO_URI" | grep -q "localhost"; then\n\
  echo "MONGO_URI not set or using localhost, attempting to discover service..."\n\
  # 尝试几个可能的服务名\n\
  for service in mongodb mongodb-service mongo; do\n\
    if nslookup $service 2>/dev/null; then\n\
      export MONGO_URI="mongodb://$service:27017"\n\
      echo "Discovered MongoDB service: $MONGO_URI"\n\
      break\n\
    fi\n\
  done\n\
  \n\
  # 如果仍然为空或使用 localhost，使用默认值\n\
  if [ -z "$MONGO_URI" ] || echo "$MONGO_URI" | grep -q "localhost"; then\n\
    export MONGO_URI="mongodb://mongodb-service:27017"\n\
    echo "No MongoDB service discovered, using default: $MONGO_URI"\n\
  fi\n\
fi\n\
\n\
# 根据环境变量决定启动哪个服务\n\
if [ "$DEPLOY" = "deposit" ]; then\n\
  echo "Starting deposit service..."\n\
  exec node ./dist/deposit_service.js\n\
elif [ "$DEPLOY" = "settlement" ]; then\n\
  echo "Starting settlement service..."\n\
  exec node ./dist/settle_service.js\n\
else\n\
  echo "No valid DEPLOY value specified. Valid values are: deposit, settlement"\n\
  echo "Exiting..."\n\
  exit 1\n\
fi' > /app/start.sh && \
chmod +x /app/start.sh

# 安装 dnsutils 和 curl 用于服务发现
RUN apt-get update && apt-get install -y dnsutils curl && rm -rf /var/lib/apt/lists/*

# 创建非 root 用户
RUN groupadd -r appuser && useradd -r -g appuser appuser

# 更改文件所有权
RUN chown -R appuser:appuser /app

# 切换到非 root 用户
USER appuser

EXPOSE 3000
CMD ["/app/start.sh"]
